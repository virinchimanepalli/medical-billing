"use strict";var Helpers=_interopRequireWildcard(require("./Helpers"));function _typeof(a){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}Object.defineProperty(exports,"__esModule",{value:!0}),exports._eq=_eq,exports._gt=_gt,exports._lt=_lt,exports._gte=_gte,exports._lte=_lte,exports._like=_like,exports._ilike=_ilike,exports._is=_is,exports._in=_in,exports._neq=_neq,exports._fts=_fts,exports._plfts=_plfts,exports._phfts=_phfts,exports._wfts=_wfts,exports._cs=_cs,exports._cd=_cd,exports._ova=_ova,exports._ovr=_ovr,exports._sl=_sl,exports._sr=_sr,exports._nxl=_nxl,exports._nxr=_nxr,exports._adj=_adj,exports._or=_or;function _getRequireWildcardCache(){if("function"!=typeof WeakMap)return null;var a=new WeakMap;return _getRequireWildcardCache=function(){return a},a}function _interopRequireWildcard(a){if(a&&a.__esModule)return a;if(null===a||"object"!==_typeof(a)&&"function"!=typeof a)return{default:a};var b=_getRequireWildcardCache();if(b&&b.has(a))return b.get(a);var c={},d=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var e in a)if(Object.prototype.hasOwnProperty.call(a,e)){var f=d?Object.getOwnPropertyDescriptor(a,e):null;f&&(f.get||f.set)?Object.defineProperty(c,e,f):c[e]=a[e]}return c["default"]=a,b&&b.set(a,c),c}/** @module Filters **/ /**
 * All exports are prefixed with an underscore to avoid collisions with reserved keywords (eg: "in")
 */ /**
 * Finds all rows whose value on the stated columnName exactly matches the specified filterValue.
 * @param {string} columnName Name of the database column
 * @param { string | integer | boolean } filterValue Value to match
 * @name eq
 * @function
 * @returns {string}
 * 
 * @example
 * _eq('name', 'New Zealand')
 * //=>
 * 'name=eq.New Zealand'
 */function _eq(a,b){return"".concat(a,"=eq.").concat(b)}/**
 * Finds all rows whose value on the stated columnName is greater than the specified filterValue. 
 * @param {string} columnName Name of the database column
 * @param { string | integer | boolean } filterValue Value to match
 * @name gt
 * @function
 * @returns {string}
 * 
 * @example
 * _gt('id', 20)
 * //=>
 * 'id=gt.20'
 */function _gt(a,b){return"".concat(a,"=gt.").concat(b)}/**
 * Finds all rows whose value on the stated columnName is less than the specified filterValue. 
 * @param {string} columnName Name of the database column
 * @param { string | integer | boolean } filterValue Value to match
 * @name lt
 * @function
 * @returns {string}
 * 
 * @example
 * _lt('id', 20)
 * //=>
 * 'id=lt.20'
 */function _lt(a,b){return"".concat(a,"=lt.").concat(b)}/**
 * Finds all rows whose value on the stated columnName is greater than or equal to the specified filterValue. 
 * @param {string} columnName Name of the database column
 * @param { string | integer | boolean } filterValue Value to match
 * @name gte
 * @function
 * @returns {string}
 * 
 * @example
 * _gte('id', 20)
 * //=>
 * 'id=gte.20'
 */function _gte(a,b){return"".concat(a,"=gte.").concat(b)}/**
 * Finds all rows whose value on the stated columnName is less than or equal to the specified filterValue. 
 * @param {string} columnName Name of the database column
 * @param { string | integer | boolean } filterValue Value to match
 * @name lte
 * @function
 * @returns {string}
 * 
 * @example
 * _lte('id', 20)
 * //=>
 * 'id=lte.20'
 */function _lte(a,b){return"".concat(a,"=lte.").concat(b)}/**
 * Finds all rows whose value in the stated columnName matches the supplied pattern (case sensitive). 
 * @param {string} columnName Name of the database column
 * @param { string } stringPattern String pattern to compare to
 * @name like
 * @function
 * @returns {string}
 * 
 * @example
 * _like('name', '%United%')
 * //=>
 * 'name=like.*United*'
 * 
 * @example
 * _like('name', '%United States%')
 * //=>
 * 'name=like.*United States*'
 */function _like(a,b){var c=b.replace(/%/g,"*");return"".concat(a,"=like.").concat(c)}/**
 * Finds all rows whose value in the stated columnName matches the supplied pattern (case insensitive). 
 * @param {string} columnName Name of the database column
 * @param { string } stringPattern String pattern to compare to
 * @name ilike
 * @function
 * @returns {string}
 * 
 * @example
 * _ilike('name', '%United%')
 * //=>
 * 'name=ilike.*United*'
 * 
 * @example
 * _ilike('name', '%United states%')
 * //=>
 * 'name=ilike.*United states*'
 */function _ilike(a,b){var c=b.replace(/%/g,"*");return"".concat(a,"=ilike.").concat(c)}/**
 * A check for exact equality (null, true, false), finds all rows whose value on the state columnName exactly match the specified filterValue. 
 * @param {string} columnName Name of the database column
 * @param { string | integer | boolean } filterValue Value to match
 * @name is
 * @function
 * @returns {string}
 * 
 * @example
 * _is('name', null)
 * //=>
 * 'name=is.null'
 */function _is(a,b){return"".concat(a,"=is.").concat(b)}/**
 * Finds all rows whose value on the stated columnName is found on the specified filterArray.
 * @param {string} columnName Name of the database column
 * @param { string | integer | boolean } filterValue Value to match
 * @name in
 * @function
 * @returns {string}
 * 
 * @example
 * _in('name', ['China', 'France'])
 * //=>
 * 'name=in.(China,France)'
 * 
 * @example
 * _in('capitals', ['Beijing,China', 'Paris,France'])
 * //=>
 * 'capitals=in.("Beijing,China","Paris,France")'
 * 
 * @example
 * _in('food_supplies', ['carrot (big)', 'carrot (small)'])
 * //=>
 * 'food_supplies=in.("carrot (big)","carrot (small)")'
 */function _in(a,b){var c=Helpers.cleanFilterArray(b);return"".concat(a,"=in.(").concat(c.join(","),")")}/**
 * Finds all rows whose value on the stated columnName is found on the specified filterArray.
 * @param {string} columnName Name of the database column
 * @param { string | integer | boolean } filterValue Value to match
 * @name not
 * @function
 * @returns {string}
 * 
 * @example
 * _neq('name', 'China')
 * //=>
 * 'name=neq.China'
 */function _neq(a,b){return"".concat(a,"=neq.").concat(b)}/**
 * Finds all rows whose tsvector value on the stated columnName matches to_tsquery(queryText).
 * @param {string} columnName Name of the database column
 * @param { object } filterObject query text and optionally config to base the match on
 * @name fts
 * @function
 * @returns {string}
 * 
 * @example
 * _fts('phrase', {queryText: 'The Fat Cats'})
 * //=>
 * 'phrase=fts.The Fat Cats'
 * 
 * @example
 * _fts('phrase', {queryText: 'The Fat Cats', config: 'english'})
 * //=>
 * 'phrase=fts(english).The Fat Cats'
 */function _fts(a,b){return"undefined"==typeof b.config?"".concat(a,"=fts.").concat(b.queryText):"".concat(a,"=fts(").concat(b.config,").").concat(b.queryText)}/**
 * Finds all rows whose tsvector value on the stated columnName matches plainto_tsquery(queryText).
 * @param {string} columnName Name of the database column
 * @param { object } filterObject query text and optionally config to base the match on
 * @name plfts
 * @function
 * @returns {string}
 * 
 * @example
 * _plfts('phrase', {queryText: 'The Fat Cats'})
 * //=>
 * 'phrase=plfts.The Fat Cats'
 * 
 * @example
 * _plfts('phrase', {queryText: 'The Fat Cats', config: 'english'})
 * //=>
 * 'phrase=plfts(english).The Fat Cats'
 */function _plfts(a,b){return"undefined"==typeof b.config?"".concat(a,"=plfts.").concat(b.queryText):"".concat(a,"=plfts(").concat(b.config,").").concat(b.queryText)}/**
 * Finds all rows whose tsvector value on the stated columnName matches phraseto_tsquery(queryText).
 * @param {string} columnName Name of the database column
 * @param { object } filterObject query text and optionally config to base the match on
 * @name phfts
 * @function
 * @returns {string}
 * 
 * @example
 * _phfts('phrase', {queryText: 'The Fat Cats'})
 * //=>
 * 'phrase=phfts.The Fat Cats'
 * 
 * @example
 * _phfts('phrase', {queryText: 'The Fat Cats', config: 'english'})
 * //=>
 * 'phrase=phfts(english).The Fat Cats'
 */function _phfts(a,b){return"undefined"==typeof b.config?"".concat(a,"=phfts.").concat(b.queryText):"".concat(a,"=phfts(").concat(b.config,").").concat(b.queryText)}/**
 * Finds all rows whose tsvector value on the stated columnName matches websearch_to_tsquery(queryText).
 * @param {string} columnName Name of the database column
 * @param { object } filterObject query text and optionally config to base the match on
 * @name wfts
 * @function
 * @returns {string}
 * 
 * @example
 * _wfts('phrase', {queryText: 'The Fat Cats'})
 * //=>
 * 'phrase=wfts.The Fat Cats'
 * 
 * @example
 * _wfts('phrase', {queryText: 'The Fat Cats', config: 'english'})
 * //=>
 * 'phrase=wfts(english).The Fat Cats'
 */function _wfts(a,b){return"undefined"==typeof b.config?"".concat(a,"=wfts.").concat(b.queryText):"".concat(a,"=wfts(").concat(b.config,").").concat(b.queryText)}/**
 * Finds all rows whose json || array || range value on the stated columnName contains the values specified in the filterObject.
 * @param {string} columnName Name of the database column
 * @param { array | object } filterObject Value to compare to
 * @name cs
 * @function
 * @returns {string}
 *
 * @example
 * _cs('countries', ['China', 'France'])
 * //=>
 * 'countries=cs.{China,France}'
 * 
 * @example
 * _cs('capitals', ['Beijing,China', 'Paris,France'])
 * //=>
 * 'capitals=cs.{"Beijing,China","Paris,France"}'
 * 
 * @example
 * _cs('food_supplies', {fruits:1000, meat:800})
 * //=>
 * 'food_supplies=cs.{"fruits":1000,"meat":800}'
 */function _cs(a,b){if(Array.isArray(b)){var c=Helpers.cleanFilterArray(b);return"".concat(a,"=cs.{").concat(c.join(","),"}")}return"".concat(a,"=cs.").concat(JSON.stringify(b))}/**
 * Finds all rows whose json || array || range value on the stated columnName is contained by the specified filterObject.
 * @param {string} columnName Name of the database column
 * @param { array | object } filterObject Value to compare to
 * @name cd
 * @function
 * @returns {string}
 *
 * @example
 * _cd('countries', ['China', 'France'])
 * //=>
 * 'countries=cd.{China,France}'
 * 
 * @example
 * _cd('capitals', ['Beijing,China', 'Paris,France'])
 * //=>
 * 'capitals=cd.{"Beijing,China","Paris,France"}'
 * 
 * @example
 * _cd('food_supplies', {fruits:1000, meat:800})
 * //=>
 * 'food_supplies=cd.{"fruits":1000,"meat":800}'
 */function _cd(a,b){if(Array.isArray(b)){var c=Helpers.cleanFilterArray(b);return"".concat(a,"=cd.{").concat(c.join(","),"}")}return"".concat(a,"=cd.").concat(JSON.stringify(b))}/**
 * Finds all rows whose array value on the stated columnName overlaps on the specified filterArray.
 * @param {string} columnName Name of the database column
 * @param {array} filterValue Value to compare to
 * @name ova
 * @function
 * @returns {string}
 * 
 * @example
 * _ova('allies', ['China', 'France'])
 * //=>
 * 'allies=ov.{China,France}'
 * 
 * @example
 * _ova('capitals', ['Beijing,China', 'Paris,France'])
 * //=>
 * 'capitals=ov.{"Beijing,China","Paris,France"}'
 * 
 */function _ova(a,b){var c=Helpers.cleanFilterArray(b);return"".concat(a,"=ov.{").concat(c.join(","),"}")}/**
 * Finds all rows whose range value on the stated columnName overlaps on the specified filterRange.
 * @param {string} columnName Name of the database column
 * @param {array} filterRange Value to to compare to
 * @name ovr
 * @function
 * @returns {string}
 *
 * @example
 * _ovr('population_range', [100, 500])
 * //=>
 * 'population_range=ov.(100,500)'
 */function _ovr(a,b){return"".concat(a,"=ov.(").concat(b.join(","),")")}/**
 * Finds all rows whose range value on the stated columnName is strictly on the left of the specified filterRange.
 * @param {string} columnName Name of the database column
 * @param {array} filterRange Value to compare to
 * @name sl
 * @function
 * @returns {string}
 *
 * @example
 * _sl('population_range', [100, 500])
 * //=>
 * 'population_range=sl.(100,500)'
 */function _sl(a,b){return"".concat(a,"=sl.(").concat(b.join(","),")")}/**
 * Finds all rows whose range value on the stated columnName is strictly on the right of the specified filterRange.
 * @param {string} columnName Name of the database column
 * @param {array} filterRange Value to compare to
 * @name sr
 * @function
 * @returns {string}
 *
 * @example
 * _sr('population_range', [100,500])
 * //=>
 * 'population_range=sr.(100,500)'
 */function _sr(a,b){return"".concat(a,"=sr.(").concat(b.join(","),")")}/**
 * Finds all rows whose range value on the stated columnName does not extend to the left of the specified filterRange.
 * @param {string} columnName Name of the database column
 * @param {array} filterRange Value to compare to
 * @name nxl
 * @function
 * @returns {string}
 *
 * @example
 * _nxl('population_range', [100, 500])
 * //=>
 * 'population_range=nxl.(100,500)'
 */function _nxl(a,b){return"".concat(a,"=nxl.(").concat(b.join(","),")")}/**
 * Finds all rows whose range value on the stated columnName does not extend to the right of the specified filterRange.
 * @param {string} columnName Name of the database column
 * @param {array} filterRange Value to compare to
 * @name nxr
 * @function
 * @returns {string}
 *
 * @example
 * _nxr('population_range', [100, 500])
 * //=>
 * 'population_range=nxr.(100,500)'
 */function _nxr(a,b){return"".concat(a,"=nxr.(").concat(b.join(","),")")}/**
 * Finds all rows whose range value on the stated columnName is adjacent to the specified filterRange.
 * @param {string} columnName Name of the database column
 * @param {array} filterRange Value to compare to
 * @name adj
 * @function
 * @returns {string}
 *
 * @example
 * _adj('population_range', [100, 500])
 * //=>
 * 'population_range=adj.(100,500)'
 */function _adj(a,b){return"".concat(a,"=adj.(").concat(b.join(","),")")}/**
 * Finds all rows that satisfy at least one of the specified `filters`.
 * @param {string} filters Filters to satisfy
 * @name or
 * @function
 * @returns {string}
 *
 * @example
 * _or('id.gt.20,and(name.eq.New Zealand,name.eq.France)')
 * //=>
 * 'or=(id.gt.20,and(name.eq.New Zealand,name.eq.France))'
 */function _or(a){return"or=(".concat(a,")")}